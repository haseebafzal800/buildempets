<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"
  integrity="sha512-XtmMtDEcNz2j7ekrtHvOVR4iwwaD6o/FUJe6+Zq+HgcCsk3kj4uSQQR8weQ2QVj1o0Pk6PwYLohm206ZzNfubg=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>

<script>
    setTimeout(function() {
      document.querySelectorAll("a.video-wrapper").forEach(video => {
          video.addEventListener("click", function(e) {
              e.preventDefault();
              this.querySelector("video").play();
          });
      });
  }, 300);

  $(document).ready(function() {
      $('.main-slider').slick({
          slidesToShow: 1.3,
          slidesToScroll: 1,
          infinite: false,
          dots: true,
          mobileFirst: true,
          arrows: true,
          prevArrow: "<button type='button' class='slick-prev pull-left'><i class='fa fa-angle-left' aria-hidden='true'></i></button>",
          nextArrow: "<button type='button' class='slick-next pull-right'><i class='fa fa-angle-right' aria-hidden='true'></i></button>",
          responsive: [{
              breakpoint: 768,
              settings: {
                  slidesToShow: 1,
                  dots: false,
                  asNavFor: '.nav-slider'
              }
          }]
      });

      $('.nav-slider').slick({
          slidesToShow: 5,
          slidesToScroll: 1,
          infinite: false,
          focusOnSelect: true,
          asNavFor: '.main-slider',
      });

      var element2 = $('.dimensions-block-content');
      var varientdimentions = element2.text();

      var components = varientdimentions.split("-");
      var newString1 = "";

      for (var i = 0; i < components.length; i++) {
          newString1 += components[i] + "<br>";
      }

      element2.html(newString1);

      $("[data-fancybox]").fancybox({
          selector: 'a',
          loop: false,
          hash: true,
          thumbs: {
              autoStart: true,
              axis: 'x'
          },
          transitionEffect: "slide",
          clickContent: function(current, event) {
              return current.type === "image" ? "next" : false;
          }
      });

  });

  let option1 = null;
  let option2 = null;
  let option3 = null;
  let newCombinedValue = null;

  option1 = {{ product.selected_or_first_available_variant.option1 | json }}
  option2 = {{ product.selected_or_first_available_variant.option2 | json }}
  option3 = {{ product.selected_or_first_available_variant.option3 | json }}

  if(option1 != null && option2 != null && option3 != null){
    newCombinedValue = option1 + ' / ' + option2 + ' / ' + option3;
    console.log({newCombinedValue})
  }else if(option1 != null && option2 != null){
    newCombinedValue = option1 + ' / ' + option2;
    console.log({newCombinedValue})
  }else if(option1 != null){
    newCombinedValue = option1;
    console.log({newCombinedValue})
  }

  // const variantOptionNames = document.querySelectorAll('.variant-optionname');

  // let firstdem = document.querySelector(".dimensions-block-content").innerHTML.split("-");
  // let firstdiv = document.querySelector('.dimensions-block-content');


  document.querySelectorAll(".customVariantWrapper .variant-row").forEach(varRow => {
      let showValue = varRow.querySelector(".custom-valueShow");
      varRow.querySelectorAll(".emswatch").forEach(swatch => {
          swatch.addEventListener("click", function(event) {
              let variantName = event.target.getAttribute("data-variantname");
              showValue.innerHTML = variantName;

              console.log({variantName, event})
              handleSelectedOption(event, variantName);
          });
      });
  });

  function handleSelectedOption(event, variantName) {
      if (event.target.parentNode.classList.contains("emIndex__1")) {
          option1 = variantName;
          if(option1 != null && option2 != null && option3 != null){
            newCombinedValue = option1 + ' / ' + option2 + ' / ' + option3;
            handleSelectedVariant(newCombinedValue);
          }else if(option1 != null && option2 != null){
            newCombinedValue = option1 + ' / ' + option2;
            handleSelectedVariant(newCombinedValue);
          }else if(option1 != null){
            newCombinedValue = option1;
            handleSelectedVariant(newCombinedValue);
          }
      } else if (event.target.parentNode.classList.contains("emIndex__2")) {
          option2 = variantName;
          if(option1 != null && option2 != null && option3 != null){
              newCombinedValue = option1 + ' / ' + option2 + ' / ' + option3;
            handleSelectedVariant(newCombinedValue);
            }else if(option1 != null && option2 != null){
              newCombinedValue = option1 + ' / ' + option2;
            handleSelectedVariant(newCombinedValue);
            }else if(option1 != null){
            newCombinedValue = option1;
            handleSelectedVariant(newCombinedValue);
          }


      } else if (event.target.parentNode.classList.contains("emIndex__3")) {
          option3 = variantName;
          if(option1 != null && option2 != null && option3 != null){
            newCombinedValue = option1 + ' / ' + option2 + ' / ' + option3;
            handleSelectedVariant(newCombinedValue);
          }else if(option1 != null && option2 != null){
            newCombinedValue = option1 + ' / ' + option2;
            handleSelectedVariant(newCombinedValue);
          }else if(option1 != null){
            newCombinedValue = option1;
            handleSelectedVariant(newCombinedValue);
          }
      }

  }

  function handleSelectedVariant(optionsCombined) {

    console.log({optionsCombined})
      let selectElement = document.querySelector("[data-product-select]");
      let options = selectElement.querySelectorAll("option");
      for (let i = 0; i < options.length; i++) {
          if (options[i].textContent.includes(optionsCombined)) {
              newCombinedValue = options[i].textContent;
              options[i].selected = true;
              let newVarPrice = options[i].getAttribute("data-variantnewprice");
              var element = document.querySelector('.theme-money.large-title');
              newVarPrice = newVarPrice.replace(" USD", "");
              element.innerHTML = newVarPrice;

              let oldVarPrice = options[i].getAttribute("data-variantoldprice");
              var element1 = document.querySelector('.product-price__compare.theme-money');
              oldVarPrice = oldVarPrice.replace(" USD", "");
              element1.innerHTML = oldVarPrice;

              let varientdimentions = options[i].getAttribute("data-variantdimentions");
              var element2 = document.querySelector('.dimensions-block-content');

              const components = varientdimentions.split("-");
              let newString1 = "";
              for (const component of components) {
                  newString1 += component + "<br>";
              }
              element2.innerHTML = newString1;
              handleHideShow(newCombinedValue);
          }
      }
  }



  function handleHideShow(newCombinedValue) {
      console.log({
          FUnValue: newCombinedValue
      })

      let withoutSpace = newCombinedValue.replace(/\s/g, '');
      withoutSpace = withoutSpace.toLowerCase();
      withoutSpace =  withoutSpace.replaceAll("/", "-");

      var key = "." + withoutSpace;
     console.log({
          key: key
      })
      $('.main-slider , .nav-slider').slick('slickUnfilter');
      $('.main-slider , .nav-slider').slick('slickFilter', key).slick('refresh');
      $('.main-slider , .nav-slider').slick('slickGoTo', 0);

  }
</script>
